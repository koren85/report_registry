$(document).ready(function() {
    const modal = {
        $overlay: $('#modal-overlay'),
        $container: $('#add-issues-modal'),
        $searchInput: $('#issues-search'),
        $searchResults: $('#issues-search-results'),
        $selectAll: $('#select-all-issues'),
        selectedIssues: new Set(),

        init() {
            this.bindEvents();
            this.setupKeyboardHandling();
        },

        bindEvents() {
            // Open modal
            $('#add-issues-btn').on('click', (e) => {
                e.preventDefault();
                this.open();
            });

            // Close modal
            $('.close-modal, #cancel-add-issues').on('click', (e) => {
                e.preventDefault();
                this.close();
            });

            this.$overlay.on('click', () => this.close());

            // Prevent modal close when clicking inside
            this.$container.on('click', (e) => e.stopPropagation());

            // Search handling
            this.$searchInput.on('input', debounce(() => this.handleSearch(), 300));

            // Selection handling
            this.$selectAll.on('change', () => this.handleSelectAll());
            this.$searchResults.on('change', '.issue-checkbox', (e) =>
                this.handleCheckboxChange($(e.target)));

            // Add selected issues
            $('#add-selected-issues').on('click', (e) => {
                e.preventDefault();
                this.addSelectedIssues();
            });
        },

        setupKeyboardHandling() {
            $(document).on('keydown', (e) => {
                if (e.key === 'Escape' && this.isOpen()) {
                    this.close();
                }
            });
        },

        open() {
            this.clearState();
            this.$overlay.fadeIn(200);
            this.$container.fadeIn(200);
            this.$searchInput.focus();
            $('body').addClass('modal-open');
        },

        close() {
            this.$overlay.fadeOut(200);
            this.$container.fadeOut(200);
            $('body').removeClass('modal-open');
            this.clearState();
        },

        isOpen() {
            return this.$container.is(':visible');
        },

        clearState() {
            this.$searchInput.val('');
            this.$searchResults.empty();
            this.$selectAll.prop('checked', false);
            this.selectedIssues.clear();
        },

        async handleSearch() {
            const query = this.$searchInput.val().trim();
            if (query.length < 2) {
                this.showMessage(I18n.t('text_search_min_chars'));
                return;
            }

            try {
                this.showMessage(I18n.t('text_loading'));
                const issues = await this.searchIssues(query);
                this.renderSearchResults(issues);
            } catch (error) {
                this.showMessage(error.message || I18n.t('error_searching_issues'));
            }
        },

        async searchIssues(query) {
            const reportId = $('#report-form').data('report-id');
            const response = await $.ajax({
                url: `/reports/${reportId}/report_issues/search`,
                data: { q: query }
            });
            return response;
        },

        renderSearchResults(issues) {
            this.$searchResults.empty();

            if (!issues?.length) {
                this.showMessage(I18n.t('text_no_issues_found'));
                return;
            }

            const rows = issues.map(issue => this.createSearchRow(issue));
            this.$searchResults.append(rows);
            this.updateSelectAllState();
        },

        createSearchRow(issue) {
            return `
                <tr>
                    <td class="checkbox-column">
                        <input type="checkbox" 
                               class="issue-checkbox" 
                               value="${issue.id}"
                               ${this.selectedIssues.has(issue.id.toString()) ? 'checked' : ''}>
                    </td>
                    <td>${issue.id}</td>
                    <td>${issue.subject}</td>
                    <td>${issue.status}</td>
                    <td>${issue.version || ''}</td>
                    <td>${this.formatDate(issue.start_date)}</td>
                    <td>${this.formatDate(issue.due_date)}</td>
                </tr>
            `;
        },

        handleSelectAll() {
            const isChecked = this.$selectAll.prop('checked');
            this.$searchResults.find('.issue-checkbox').each((_, checkbox) => {
                const $checkbox = $(checkbox);
                $checkbox.prop('checked', isChecked);

                if (isChecked) {
                    this.selectedIssues.add($checkbox.val());
                } else {
                    this.selectedIssues.delete($checkbox.val());
                }
            });
        },

        handleCheckboxChange($checkbox) {
            const issueId = $checkbox.val();
            if ($checkbox.prop('checked')) {
                this.selectedIssues.add(issueId);
            } else {
                this.selectedIssues.delete(issueId);
            }
            this.updateSelectAllState();
        },

        updateSelectAllState() {
            const $checkboxes = this.$searchResults.find('.issue-checkbox');
            const allChecked = $checkboxes.length > 0 &&
                $checkboxes.length === $checkboxes.filter(':checked').length;
            this.$selectAll.prop('checked', allChecked);
        },

        async addSelectedIssues() {
            if (this.selectedIssues.size === 0) {
                alert(I18n.t('text_no_issues_selected'));
                return;
            }

            const reportId = $('#report-form').data('report-id');
            try {
                await $.ajax({
                    url: `/reports/${reportId}/report_issues/add_issues`,
                    method: 'POST',
                    data: { issue_ids: Array.from(this.selectedIssues) }
                });

                this.close();
                loadReportIssues(); // Assume this function exists to reload the main table
            } catch (error) {
                alert(error.responseJSON?.error || I18n.t('error_adding_issues'));
            }
        },

        showMessage(message) {
            this.$searchResults.html(`
                <tr>
                    <td colspan="7" class="text-center">${message}</td>
                </tr>
            `);
        },

        formatDate(dateString) {
            if (!dateString) return '';
            return new Date(dateString).toLocaleDateString();
        }
    };

    // Initialize modal functionality
    modal.init();

    // Utility function
    function debounce(func, wait) {
        let timeout;
        return function(...args) {
            clearTimeout(timeout);
            timeout = setTimeout(() => func.apply(this, args), wait);
        };
    }
});